#
# docker-compose.yml: Docker Compose configuration for setting up a suite of services
# that utilize Private Internet Access (PIA) with WireGuard, managed through Gluetun,
# and including other 'arr' applications like Sonarr, Radarr, etc.
#
# This configuration sets up default properties for all containers, integrates
# PIA with native wireguard connections, and provides environment-specific settings
# for a seamless VPN setup.
#
# For more details on PIA manual connections, visit: https://github.com/scottgigawatt/privataarr
#
# Services included:
# - gluetun: https://github.com/qdm12/gluetun
# - flaresolverr: https://github.com/FlareSolverr/FlareSolverr
# - prowlarr: https://github.com/Prowlarr/Prowlarr
# - qbittorrent: https://github.com/qbittorrent/qBittorrent
# - radarr: https://github.com/Radarr/Radarr
# - sonarr: https://github.com/Sonarr/Sonarr
# - bazarr: https://github.com/morpheus65535/bazarr
# - readarr: https://github.com/Readarr/Readarr
# - duplicati: https://www.duplicati.com
# - watchtower: https://containrrr.dev/watchtower
#

---

#
# Setup default propreties for all or most containers
#
x-default-container: &default-container # YAML anchor for default container
  pull_policy: always                   # Ensure that the image is always pulled
  restart: unless-stopped               # Restart the container unless explicitly stopped
  logging:                              # Configure container logging options
    options:
      max-size: ${LOG_MAX_SIZE}         # Maximum file size for logs files
      max-file: ${LOG_MAX_FILE}         # Maximum number of log files to retain

#
# Setup default variables for all or most containers
#
x-default-environment: &default-environment # YAML anchor for default environment
    TZ: ${TZ}                               # Set the appropriate timezone

#
# Containers on the arr-stack nework, also have access to specific volumes
#
x-arr-stack-container: &arr-stack-container # YAML anchor for arr-stack container
  <<: *default-container                    # Pull in the default container information
  group_add:                                # Add additional user groups
    - ${DEFAULT_GROUP}                      # Default group used to manage write permisions
  environment:                              # Define common arr-stack environment variables
    <<: *default-environment                # Pull in the default environment information
    PUID: ${DEFAULT_PUID}                   # Default user id mapping for containers
    PGID: ${DEFAULT_PGID}                   # Default group id mapping for containers

#
# Define the services section
#
services:
  #
  # Define the 'gluetun' service to route traffic through a wireguard VPN connection
  #
  gluetun:
    # Docker image and container information
    <<: *default-container                 # Pull in default container config
    image: qmcgaw/gluetun:${GLUETUN_TAG}   # Run using the specified tag
    container_name: gluetun-${GLUETUN_TAG} # Append Docker image tag to container name
    cap_add:                               # Add additional linux capabilities
      - NET_ADMIN                          # Allow modification of network interfaces

    # Define the container environment
    environment:
      <<: *default-environment                              # Pull in the default environment information
      VPN_SERVICE_PROVIDER: ${GLUETUN_VPN_SERVICE_PROVIDER} # The VPN service provider, e.g. custom
      VPN_TYPE: ${GLUETUN_VPN_TYPE}                         # The VPN type, e.g. wireguard

    # Define the host and container ports
    ports:
      - ${QBITTORRENT_TCP_PORT}:6881     # qBittorrent TCP connection port
      - ${QBITTORRENT_TCP_PORT}:6881/udp # qBittorrent UDP connection port
      - ${QBITTORRENT_WEBUI_PORT}:8080   # qBittorrent web UI port
      - ${PROWLARR_WEBUI_PORT}:9696      # Prowlarr web UI port
      - ${RADARR_WEBUI_PORT}:7878        # Radarr web UI port
      - ${SONARR_WEBUI_PORT}:8989        # Sonarr web UI port
      - ${BAZARR_WEBUI_PORT}:6767        # Bazarr web UI port
      - ${READARR_WEBUI_PORT}:8787       # Readarr web UI port

    # Mount host directories into the container
    volumes:
      - ${GLUETUN_CONFIG_PATH}:/gluetun:rw # Configuration files including wireguard config at gluetun/wireguard/wg0.conf

  #
  # Define the 'flaresolverr' service to bypass Cloudflare and DDoS-GUARD protection
  #
  flaresolverr:
    # Docker image and container information
    <<: *default-container                                       # Pull in default container config
    image: ghcr.io/flaresolverr/flaresolverr:${FLARESOLVERR_TAG} # Run using the specified tag
    container_name: flaresolverr-${FLARESOLVERR_TAG}             # Append Docker image tag to container name
    hostname: flaresolverr                                       # Set the container hostname
    network_mode: bridge                                         # Use the default bridge network

    # Define the host and container ports
    ports:
      - ${FLARESOLVERR_PORT}:8191 # Port to listen for requests

    # Define the container environment
    environment:
      <<: *default-environment                       # Pull in the default environment information
      LOG_LEVEL: ${FLARESOLVERR_LOG_LEVEL}           # Container log level
      LOG_HTML: ${FLARESOLVERR_LOG_HTML}             # Toggle HTML logging
      CAPTCHA_SOLVER: ${FLARESOLVERR_CAPTCHA_SOLVER} # Specify captcha solver

  #
  # Define the 'prowlarr' service for managing indexers
  #
  prowlarr:
    # Docker image and container information
    <<: *arr-stack-container                    # Pull in arr-stack container config
    image: linuxserver/prowlarr:${PROWLARR_TAG} # Run using the specified tag
    container_name: prowlarr-${PROWLARR_TAG}    # Append Docker image tag to container name
    network_mode: service:gluetun               # Route network traffic through gluetun

    # Mount host directories into the container
    volumes:
      - ${PROWLARR_CONFIG_PATH}:/config:rw # Database and Prowlarr configs

    # Specify container service dependencies
    depends_on:
      - gluetun
      - flaresolverr

  #
  # Define the 'qbittorrent' service for managing torrents
  #
  qbittorrent:
    # Docker image and container information
    <<: *arr-stack-container                                  # Pull in arr-stack container config
    image: lscr.io/linuxserver/qbittorrent:${QBITTORRENT_TAG} # Run using the specified tag
    container_name: qbittorrent-${QBITTORRENT_TAG}            # Append Docker image tag to container name
    network_mode: service:gluetun                             # Route network traffic through gluetun

    # Mount host directories into the container
    volumes:
      - ${QBITTORRENT_CONFIG_PATH}:/config:rw # Configuration files
      - ${HOST_DOWNLOADS_PATH}:/downloads:rw  # Location of download managers output directory

  #
  # Define the 'radarr' service for managing movies
  #
  radarr:
    # Docker image and container information
    <<: *arr-stack-container                        # Pull in arr-stack container config
    image: lscr.io/linuxserver/radarr:${RADARR_TAG} # Run using the specified tag
    container_name: radarr-${RADARR_TAG}            # Append Docker image tag to container name
    network_mode: service:gluetun                   # Route network traffic through gluetun

    # Mount host directories into the container
    volumes:
      - ${RADARR_CONFIG_PATH}:/config:rw     # Database and Radarr configs
      - ${HOST_DOWNLOADS_PATH}:/downloads:rw # Location of download managers output directory
      - ${HOST_MOVIES_PATH}:/movies:rw       # Location of movie library on disk

    # Specify container service dependencies
    depends_on:
      - gluetun
      - prowlarr
      - qbittorrent

  #
  # Define the 'sonarr' service for managing tv shows
  #
  sonarr:
    # Docker image and container information
    <<: *arr-stack-container                        # Pull in arr-stack container config
    image: lscr.io/linuxserver/sonarr:${SONARR_TAG} # Run using the specified tag
    container_name: sonarr-${SONARR_TAG}            # Append Docker image tag to container name
    network_mode: service:gluetun                   # Route network traffic through gluetun

    # Mount host directories into the container
    volumes:
      - ${SONARR_CONFIG_PATH}:/config:rw     # Database and Sonarr configs
      - ${HOST_DOWNLOADS_PATH}:/downloads:rw # Location of download managers output directory
      - ${HOST_TV_PATH}:/tv:rw               # Location of TV library on disk

    # Specify container service dependencies
    depends_on:
      - gluetun
      - prowlarr
      - qbittorrent

  #
  # Define the 'bazarr' service for managing subtitles
  #
  bazarr:
    # Docker image and container information
    <<: *arr-stack-container                        # Pull in arr-stack container config
    image: lscr.io/linuxserver/bazarr:${BAZARR_TAG} # Run using the specified tag
    container_name: bazarr-${BAZARR_TAG}            # Append Docker image tag to container name
    network_mode: service:gluetun                   # Route network traffic through gluetun

    # Mount host directories into the container
    volumes:
      - ${BAZARR_CONFIG_PATH}:/config:rw # Persistent config files
      - ${HOST_MOVIES_PATH}:/movies:rw   # Location of movies library on disk
      - ${HOST_TV_PATH}:/tv:rw           # Location of TV library on disk

    # Specify container service dependencies
    depends_on:
      - sonarr
      - radarr

  #
  # Define the 'readarr' service for managing ebooks
  #
  readarr:
    # Docker image and container information
    <<: *arr-stack-container                          # Pull in arr-stack container config
    image: lscr.io/linuxserver/readarr:${READARR_TAG} # Run using the specified tag
    container_name: readarr-${READARR_TAG}            # Append Docker image tag to container name
    network_mode: service:gluetun                     # Route network traffic through gluetun

    # Mount host directories into the container
    volumes:
      - ${READARR_CONFIG_PATH}:/config:rw    # Database and Readarr configs
      - ${HOST_DOWNLOADS_PATH}:/downloads:rw # Location of download managers output directory
      - ${HOST_BOOKS_PATH}:/books:rw         # Location of book library on disk

    # Specify container service dependencies
    depends_on:
      - gluetun
      - prowlarr
      - qbittorrent

  #
  # Define the 'duplicati' service for managing backups
  #
  duplicati:
    # Docker image and container information
    <<: *arr-stack-container                              # Pull in arr-stack container config
    image: lscr.io/linuxserver/duplicati:${DUPLICATI_TAG} # Run using the specified tag
    container_name: duplicati-${DUPLICATI_TAG}            # Append Docker image tag to container name
    hostname: duplicati                                   # Set the container hostname
    network_mode: bridge                                  # Use the default bridge network

    # Define the host and container ports
    ports:
      - ${DUPLICATI_WEBUI_PORT}:8200 # Duplicati web UI port

    # Mount host directories into the container
    volumes:
      - ${DUPLICATI_CONFIG_PATH}:/config:rw   # Contains all relevant configuration files
      - ${DUPLICATI_BACKUPS_PATH}:/backups:rw # Path to store local backups
      - ${DUPLICATI_SOURCE_PATH}:/source:rw   # Path to source for files to backup

  #
  # Define the 'watchtower' service for base image updates
  #
  watchtower:
    # Docker image and container information
    <<: *default-container                         # Pull in the default container information
    image: containrrr/watchtower:${WATCHTOWER_TAG} # Run using the specified tag
    container_name: watchtower-${WATCHTOWER_TAG}   # Append Docker image tag to container name
    hostname: watchtower                           # Set the container hostname
    network_mode: bridge                           # Use the default bridge network

    # Define the container environment
    environment:
      <<: *default-environment                                    # Pull in the default environment
      WATCHTOWER_POLL_INTERVAL: ${WATCHTOWER_POLL_INTERVAL}       # Set how often to check for new images
      WATCHTOWER_CLEANUP: ${WATCHTOWER_CLEANUP}                   # Clean old images afer updates
      WATCHTOWER_INCLUDE_STOPPED: ${WATCHTOWER_INCLUDE_STOPPED}   # Update stopped containers as well
      WATCHTOWER_REVIVE_STOPPED: ${WATCHTOWER_REVIVE_STOPPED}     # Start stopped containers after update
      WATCHTOWER_NOTIFICATIONS: ${WATCHTOWER_NOTIFICATIONS}       # Send notifications for updates
      WATCHTOWER_NOTIFICATION_URL: ${WATCHTOWER_NOTIFICATION_URL} # URL for webhook notifications

    # Mount host directories into the container
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:rw # Allow container to talk to host Docker API
      - /etc/localtime:/etc/localtime:ro             # Setup container with the proper timezone
