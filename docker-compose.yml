#
# docker-compose.yml: Docker Compose configuration for setting up a suite of services
# that utilize Private Internet Access (PIA) with WireGuard, managed through Gluetun,
# and including other 'arr' applications like Sonarr, Radarr, etc.
#
# This configuration sets up default properties for all containers, integrates
# PIA with native wireguard connections, and provides environment-specific settings
# for a seamless VPN setup.
#
# For more details on PIA manual connections, visit: https://github.com/scottgigawatt/privataarr
#
# Services included:
# - gluetun: https://github.com/qdm12/gluetun
# - flaresolverr: https://github.com/FlareSolverr/FlareSolverr
# - prowlarr: https://github.com/Prowlarr/Prowlarr
# - qbittorrent: https://github.com/qbittorrent/qBittorrent
# - radarr: https://github.com/Radarr/Radarr
# - sonarr: https://github.com/Sonarr/Sonarr
# - bazarr: https://github.com/morpheus65535/bazarr
# - readarr: https://github.com/Readarr/Readarr
#

---

#
# Setup default propreties for all or most containers
#
x-default-container: &default-container # YAML anchor for default container
  pull_policy: always                   # Ensure that the image is always pulled
  restart: unless-stopped               # Restart the container unless explicitly stopped
  user: ${DEFAULT_UID}:${DEFAULT_GID}   # Default user and group IDs for containers
  group_add:                            # Add additional user groups
    - ${DEFAULT_GROUP}                  # Default group used to manage write permisions
  logging:                              # Configure container logging options
    options:
      max-size: ${LOG_MAX_SIZE}         # Maximum file size for logs files
      max-file: ${LOG_MAX_FILE}         # Maximum number of log files to retain
  environment:
    PUID: ${DEFAULT_PUID}               # Default user id mapping for containers
    PGID: ${DEFAULT_PGID}               # Default group id mapping for containers
    TZ: ${TZ}                           # Set the appropriate timezone

#
# Containers on the arr-stack nework, also have access to specific volumes
#
x-arr-stack-container: &arr-stack-container # YAML anchor for arr-stack container
  <<: *default-container                    # Pull in the default container information
  volumes:                                  # Mount host directories into the container
    - ${HOST_DOWNLOADS_PATH}:/mnt/downloads # Mount host downloads folder
    - ${HOST_MEDIA_PATH}:/mnt/media         # Mount host media folder

#
# Define the services section
#
services:
  #
  # Define the 'gluetun' service
  #
  gluetun:
    # Docker image build and container information
    image: qmcgaw/gluetun:${GLUETUN_TAG}   # Run using the specified tag
    container_name: gluetun-${GLUETUN_TAG} # Append Docker image tag to container name
    cap_add:                               # Add additional linux capabilities
      - NET_ADMIN                          # Allow modification of network interfaces

    # Specify devices used by the container
    # devices:
    #   - /dev/net/tun:/dev/net/tun

    # Define the container environment
    environment:
      VPN_SERVICE_PROVIDER: ${GLUETUN_VPN_SERVICE_PROVIDER}       # The VPN service provider
      VPN_TYPE: ${GLUETUN_VPN_TYPE}                               # The VPN type, e.g. wireguard
      VPN_ENDPOINT_IP: ${GLUETUN_VPN_ENDPOINT_IP}                 # The server endpoint IP address
      VPN_ENDPOINT_PORT: ${GLUETUN_VPN_ENDPOINT_PORT}             # The server endpoint port
      WIREGUARD_PUBLIC_KEY: ${GLUETUN_WIREGUARD_PUBLIC_KEY}       # The server 32 bytes public key in base64 format
      WIREGUARD_PRIVATE_KEY: ${GLUETUN_WIREGUARD_PRIVATE_KEY}     # Your 32 bytes private key in base64 format
      WIREGUARD_PRESHARED_KEY: ${GLUETUN_WIREGUARD_PRESHARED_KEY} # Optional 32 bytes pre-shared key in base64 format
      WIREGUARD_ADDRESSES: ${GLUETUN_WIREGUARD_ADDRESSES}         # Your IP network interface address

    # Define the host and container ports
    ports:
      - ${QBITTORRENT_TCP_PORT}:6881     # qBittorrent TCP connection port
      - ${QBITTORRENT_TCP_PORT}:6881/udp # qBittorrent UDP connection port
      - ${QBITTORRENT_WEBUI_PORT}:8080   # qBittorrent web UI port
      - ${PROWLARR_WEBUI_PORT}:9696      # Prowlarr web UI port
      - ${RADARR_WEBUI_PORT}:7878        # Radarr web UI port
      - ${SONARR_WEBUI_PORT}:8989        # Sonarr web UI port
      - ${READARR_WEBUI_PORT}:8787       # Readarr web UI port
      - ${JACKETT_WEBUI_PORT}:9117       # Jackett web UI port

    # Mount host directories into the container
    volumes:
      - ${GLUETON_CONFIG_PATH}:/gluetun # Configuration files

  #
  # Define the 'flaresolverr' service to bypass Cloudflare and DDoS-GUARD protection
  #
  flaresolverr:
    <<: *arr-stack-container                                     # Pull in default container config
    image: ghcr.io/flaresolverr/flaresolverr:${FLARESOLVERR_TAG} # Run using the specified tag
    container_name: flaresolverr-${FLARESOLVERR_TAG}             # Append Docker image tag to container name
    hostname: flaresolverr                                       # Set the container hostname

    # Define the container environment
    environment:
      LOG_LEVEL: ${FLARESOLVERR_LOG_LEVEL}           # Container log level
      LOG_HTML: ${FLARESOLVERR_LOG_HTML}             # Toggle HTML logging
      CAPTCHA_SOLVER: ${FLARESOLVERR_CAPTCHA_SOLVER} # Specify captcha solver

  #
  # Define the 'prowlarr' service for managing indexers
  #
  prowlarr:
    <<: *arr-stack-container                    # Pull in default container config
    image: linuxserver/prowlarr:${PROWLARR_TAG} # Run using the specified tag
    container_name: prowlarr-${PROWLARR_TAG}    # Append Docker image tag to container name
    hostname: prowlarr                          # Set the container hostname
    network_mode: service:gluetun               # Route network traffic through gluetun

    # Mount host directories into the container
    volumes:
      - ${PROWLARR_CONFIG_PATH}:/config # Database and Prowlarr configs

    # Specify container service dependencies
    depends_on:
      - gluetun
      - flaresolverr

  #
  # Define the 'qbittorrent' service for managing torrents
  #
  qbittorrent:
    <<: *arr-stack-container                                  # Pull in default container config
    image: lscr.io/linuxserver/qbittorrent:${QBITTORRENT_TAG} # Run using the specified tag
    container_name: qbittorrent-${QBITTORRENT_TAG}            # Append Docker image tag to container name
    hostname: qbittorrent                                     # Set the container hostname
    network_mode: service:gluetun                             # Route network traffic through gluetun

    # Define the container environment
    environment:
      WEBUI_PORT: ${QBITTORRENT_WEBUI_PORT} # Change web UI port

    # Mount host directories into the container
    volumes:
      - ${QBITTORRENT_CONFIG_PATH}:/config # Configuration files
      - ${HOST_DOWNLOADS_PATH}:/downloads  # Location of download managers output directory

  #
  # Define the 'radarr' service for managing movies
  #
  radarr:
    <<: *arr-stack-container                        # Pull in default container config
    image: lscr.io/linuxserver/radarr:${RADARR_TAG} # Run using the specified tag
    container_name: radarr-${RADARR_TAG}            # Append Docker image tag to container name
    hostname: radarr                                # Set the container hostname
    network_mode: service:gluetun                   # Route network traffic through gluetun

    # Mount host directories into the container
    volumes:
      - ${RADARR_CONFIG_PATH}:/config     # Database and Radarr configs
      - ${HOST_DOWNLOADS_PATH}:/downloads # Location of download managers output directory
      - ${HOST_MOVIES_PATH}:/movies       # Location of movie library on disk

    # Specify container service dependencies
    depends_on:
      - gluetun
      - prowlarr
      - qbittorrent

  #
  # Define the 'sonarr' service for managing tv shows
  #
  sonarr:
    <<: *arr-stack-container                        # Pull in default container config
    image: lscr.io/linuxserver/sonarr:${SONARR_TAG} # Run using the specified tag
    container_name: sonarr-${SONARR_TAG}            # Append Docker image tag to container name
    hostname: sonarr                                # Set the container hostname
    network_mode: service:gluetun                   # Route network traffic through gluetun

    # Mount host directories into the container
    volumes:
      - ${SONARR_CONFIG_PATH}:/config     # Database and Sonarr configs
      - ${HOST_DOWNLOADS_PATH}:/downloads # Location of download managers output directory
      - ${HOST_TV_PATH}:/tv               # Location of TV library on disk

    # Specify container service dependencies
    depends_on:
      - gluetun
      - prowlarr
      - qbittorrent

  #
  # Define the 'bazarr' service for managing subtitles
  #
  bazarr:
    <<: *arr-stack-container                        # Pull in default container config
    image: lscr.io/linuxserver/bazarr:${BAZARR_TAG} # Run using the specified tag
    container_name: bazarr-${BAZARR_TAG}            # Append Docker image tag to container name
    hostname: bazarr                                # Set the container hostname
    network_mode: service:gluetun                   # Route network traffic through gluetun

    # Mount host directories into the container
    volumes:
      - ${BAZARR_CONFIG_PATH}:/config # Persistent config files
      - ${HOST_MOVIES_PATH}:/movies   # Location of movies library on disk
      - ${HOST_TV_PATH}:/tv           # Location of TV library on disk

    # Define the host and container ports
    ports:
      - ${BAZARR_WEBSERVER_PORT}:6767 # Allow HTTP access to the internal webserver

    # Specify container service dependencies
    depends_on:
      - sonarr
      - radarr

  #
  # Define the 'readarr' service for managing ebooks
  #
  readarr:
    <<: *arr-stack-container                          # Pull in default container config
    image: lscr.io/linuxserver/readarr:${READARR_TAG} # Run using the specified tag
    container_name: readarr-${READARR_TAG}            # Append Docker image tag to container name
    hostname: readarr                                 # Set the container hostname
    network_mode: service:gluetun                     # Route network traffic through gluetun

    # Mount host directories into the container
    volumes:
      - ${READARR_CONFIG_PATH}:/config    # Database and Readarr configs
      - ${HOST_DOWNLOADS_PATH}:/downloads # Location of download managers output directory
      - ${HOST_BOOKS_PATH}:/books         # Location of book library on disk

    # Specify container service dependencies
    depends_on:
      - gluetun
      - prowlarr
      - qbittorrent

#
# Define services network
#
networks:
  arr-stack:       # Services network name
    driver: bridge # Use the default bridge network
